INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935157141372928', '研发工具-代码生成默认包名', 'gen.defaultPackageName', 'com.jeesite.modules', '0', 'system', '2019-07-21 21:35:36', 'system', '2019-07-21 21:35:36', '新建项目后，修改该键值，在生成代码的时候就不要再修改了');
INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935157804072960', '主框架页-桌面仪表盘首页地址', 'sys.index.desktopUrl', '/desktop', '0', 'system', '2019-07-21 21:35:36', 'system', '2019-07-21 21:35:36', '主页面的第一个页签首页桌面地址');
INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935158399664128', '主框架页-主导航菜单显示风格', 'sys.index.menuStyle', '1', '0', 'system', '2019-07-21 21:35:36', 'system', '2019-07-21 21:35:36', '1：菜单全部在左侧；2：根菜单显示在顶部');
INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935158865231872', '主框架页-侧边栏的默认显示样式', 'sys.index.sidebarStyle', '1', '0', 'system', '2019-07-21 21:35:37', 'system', '2019-07-21 21:35:37', '1：默认显示侧边栏；2：默认折叠侧边栏');
INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935159330799616', '主框架页-默认皮肤样式名称', 'sys.index.skinName', 'skin-blue-light', '0', 'system', '2019-07-21 21:35:37', 'system', '2019-07-21 21:35:37', 'skin-black-light、skin-black、skin-blue-light、skin-blue、skin-green-light、skin-green、skin-purple-light、skin-purple、skin-red-light、skin-red、skin-yellow-light、skin-yellow');
INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935159905419264', '用户登录-登录失败多少次数后显示验证码', 'sys.login.failedNumAfterValidCode', '100', '0', 'system', '2019-07-21 21:35:37', 'system', '2019-07-21 21:35:37', '设置为0强制使用验证码登录');
INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935160408735744', '用户登录-登录失败多少次数后锁定账号', 'sys.login.failedNumAfterLockAccount', '200', '0', 'system', '2019-07-21 21:35:37', 'system', '2019-07-21 21:35:37', '登录失败多少次数后锁定账号');
INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935160941412352', '用户登录-登录失败多少次数后锁定账号的时间', 'sys.login.failedNumAfterLockMinute', '20', '0', 'system', '2019-07-21 21:35:37', 'system', '2019-07-21 21:35:37', '锁定账号的时间（单位：分钟）');
INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935161763495936', '账号自助-是否开启用户注册功能', 'sys.account.registerUser', 'true', '0', 'system', '2019-07-21 21:35:37', 'system', '2019-07-21 21:35:37', '是否开启注册用户功能');
INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935162468139008', '账号自助-允许自助注册的用户类型', 'sys.account.registerUser.userTypes', '-1', '0', 'system', '2019-07-21 21:35:37', 'system', '2019-07-21 21:35:37', '允许注册的用户类型（多个用逗号隔开，如果注册时不选择用户类型，则第一个为默认类型）');
INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935162971455488', '账号自助-验证码有效时间（分钟）', 'sys.account.validCodeTimeout', '10', '0', 'system', '2019-07-21 21:35:38', 'system', '2019-07-21 21:35:38', '找回密码时，短信/邮件验证码有效时间（单位：分钟，0表示不限制）');
INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935163411857408', '用户管理-账号默认角色-员工类型', 'sys.user.defaultRoleCodes.employee', 'default', '0', 'system', '2019-07-21 21:35:38', 'system', '2019-07-21 21:35:38', '所有员工用户都拥有的角色权限（适用于菜单授权查询）');
INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935164057780224', '用户管理-账号初始密码', 'sys.user.initPassword', '123456', '0', 'system', '2019-07-21 21:35:38', 'system', '2019-07-21 21:35:38', '创建用户和重置密码的时候用户的密码');
INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935164649177088', '用户管理-初始密码修改策略', 'sys.user.initPasswordModify', '1', '0', 'system', '2019-07-21 21:35:38', 'system', '2019-07-21 21:35:38', '0：初始密码修改策略关闭，没有任何提示；1：提醒用户，如果未修改初始密码，则在登录时和点击菜单就会提醒修改密码对话框；2：强制实行初始密码修改，登录后若不修改密码则不能进行系统操作');
INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935165097967616', '用户管理-账号密码修改策略', 'sys.user.passwordModify', '1', '0', 'system', '2019-07-21 21:35:38', 'system', '2019-07-21 21:35:38', '0：密码修改策略关闭，没有任何提示；1：提醒用户，如果未修改初始密码，则在登录时和点击菜单就会提醒修改密码对话框；2：强制实行初始密码修改，登录后若不修改密码则不能进行系统操作。');
INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935165626449920', '用户管理-账号密码修改策略验证周期', 'sys.user.passwordModifyCycle', '30', '0', 'system', '2019-07-21 21:35:38', 'system', '2019-07-21 21:35:38', '密码安全修改周期是指定时间内提醒或必须修改密码（例如设置30天）的验证时间（天），超过这个时间登录系统时需，提醒用户修改密码或强制修改密码才能继续使用系统。单位：天，如果设置30天，则第31天开始强制修改密码');
INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935166096211968', '用户管理-密码修改多少次内不允许重复', 'sys.user.passwordModifyNotRepeatNum', '1', '0', 'system', '2019-07-21 21:35:38', 'system', '2019-07-21 21:35:38', '默认1次，表示不能与上次密码重复；若设置为3，表示并与前3次密码重复');
INSERT INTO cardmanager.js_sys_config (id, config_name, config_key, config_value, is_sys, create_by, create_date, update_by, update_date, remarks) VALUES ('1152935166561779712', '用户管理-账号密码修改最低安全等级', 'sys.user.passwordModifySecurityLevel', '0', '0', 'system', '2019-07-21 21:35:38', 'system', '2019-07-21 21:35:38', '0：不限制等级（用户在修改密码的时候不进行等级验证）；1：限制最低等级为很弱；2：限制最低等级为弱；3：限制最低等级为安全；4：限制最低等级为很安全');